// Class & placeholders helpers
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Splits a string by a delimiter
//
// @function str-split
//
// @private
//
// @param    $string    {string} The string to split
// @param    $delimiter {string} The boundary string to split the string
//
// @return              {list}   The splitted list
@function str-split($string, $delimiter: '') {
  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $break: false;

  @while not $break {
    $index: str-index($string, $delimiter);

    @if not $index or $index == 0 {
      $break: true;
    } @else {
      $part: if($index != 1, str-slice($string, 1, $index - 1), '');
      $result: append($result, $part);
      $string: str-slice($string, $index + str-length($delimiter));
    }
  }

  @return append($result, $string);
}

// Joins list elements with a string
//
// @function str-join
//
// @private
//
// @param $list {list}   The list to join
// @param $glue {string} The glue string to join list elements
//
// @return      {string} The joined string
@function str-join($list, $glue: '') {
  $result: '';

  @if length($list) == 0 {
    @return $result;
  }

  @if length($list) > 1 {
    @for $i from 1 through length($list) - 1 {
      $result: $result + nth($list, $i) + $glue;
    }
  }

  $result: $result + nth($list, length($list));

  @return $result;
}

// Extracts a slice of a list
//
// @function list-slice
//
// @private
//
// @param  $list  {list}   The list to extract
// @param  $start {number} The start index to extract
// @param  $end   {number} The end index to extract
//
// @return        {list}   The extracted list
@function list-slice($list, $start: 1, $end: length($list)) {
  $result: ();

  @for $i from $start through $end {
    $result: append($result, nth($list, $i));
  }

  @return $result;
}

// Recursively merges one or more maps
//
// @function config-map-merge
//
// @private
//
// @param  $maps {map} The map(s) to merge
//
// @return       {map} The merged map
@function config-map-merge($maps) {
  $result: nth($maps, 1);

  @for $i from 1 through length($maps) - 1 {
    @each $key, $value in nth($maps, $i + 1) {
      @if type-of($result) != 'map' {
        $result: ($key: $value);
      }

      @if type-of($value) == 'map' {
        $value: config-map-merge(map-get($result, $key), $value);
      }

      @if $key != null {
        $result: map-merge($result, ($key: $value));
      }
    }
  }

  @return $result;
}
