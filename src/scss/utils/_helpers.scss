// Class & placeholders helpers
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Splits a string by a delimiter
//
// @function str-split
//
// @access private
//
// @param $string    {string} The string to split
// @param $delimiter {string} The boundary string to split the string
//
// @return           {list}   The splitted list
@function str-split($string, $delimiter: '') {
  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $break: false;

  @while not $break {
    $index: str-index($string, $delimiter);

    @if not $index or $index == 0 {
      $break: true;
    } @else {
      $part: if($index != 1, str-slice($string, 1, $index - 1), '');
      $result: append($result, $part);
      $string: str-slice($string, $index + str-length($delimiter));
    }
  }

  @return append($result, $string);
}

// Joins list elements with a string
//
// @function str-join
//
// @access private
//
// @param $list {list}   The list to join
// @param $glue {string} The glue string to join list elements
//
// @return      {string} The joined string
@function str-join($list, $glue: '') {
  $result: '';

  @if length($list) == 0 {
    @return $result;
  }

  @if length($list) > 1 {
    @for $i from 1 through length($list) - 1 {
      $result: $result + nth($list, $i) + $glue;
    }
  }

  $result: $result + nth($list, length($list));

  @return $result;
}

// Extracts a slice of a list
//
// @function list-slice
//
// @access private
//
// @param  $list  {list}   The list to extract
// @param  $start {number} The start index to extract
// @param  $end   {number} The end index to extract
//
// @return        {list}   The extracted list
@function list-slice($list, $start: 1, $end: length($list)) {
  $output: ();

  @for $i from $start through $end {
    $output: append($output, nth($list, $i));
  }

  @return $output;
}

// Returns whether the key of a map path exists in a Map
//
// @function config-map-has
//
// @access private
//
// @param $map {map...} The Map
// @param $key {string} The map path
//
// @return     {bool}   True if the map path has a value,
//                            otherwise false
@function config-map-has($map, $key) {
  $keys: str-split($key, $config-delimiter);
  $value: $map;

  @each $key in $keys {
    @if type-of($value) != 'map' or not map-has-key($value, $key) {
      @return false;
    }

    $value: map-get($value, $key);
  }

  @return true;
}

// Gets a value from a Map by the map path
//
// @function config-map-get
//
// @access private
//
// @param $map  {map...} The Map
// @param $path {string} The map path
//
// @return      {*}      The value of the map path
@function config-map-get($map, $path) {
  $keys: str-split($path, $config-delimiter);
  $value: $map;

  @each $key in $keys {
    @if type-of($value) != 'map' or not map-has-key($value, $key) {
      @warn 'The path "#{$path}" doesn\'t exist.';

      @return null;
    }

    $value: map-get($value, $key);
  }

  @return $value;
}

// Sets a value to a Map by the map path
//
// @function config-map-set
//
// @access private
//
// @param $map   {map}    The Map
// @param $path  {string} The map path
// @param $value {*|null} The value to set
//
// @return       {map...} A new Map
@function config-map-set($map, $path, $value) {
  $keys: str-split($path, $config-delimiter);
  $length: length($keys);

  $result: (nth($keys, $length): $value);

  @for $i from 1 through $length - 1 {
    $path: '';
    $key: nth($keys, 1);

    @if $length > 1 {
      $j: $length - $i;
      $key: nth($keys, $j);

      $path: str-join(list-slice($keys, 1, $j), $config-delimiter);
    }

    @if config-map-has($map, $path) {
      $value: config-map-get($map, $path);

      @if type-of($value) == 'map' {
        $result: config-map-merge(($key: $value), ($key: $result));
      } @else {
        $result: ($key: $result);
      }
    } @else {
      $result: ($key: $result);
    }
  }

  $map: config-map-merge($map, $result);

  @return $map;
}

// Recursively merges one or more maps
//
// @function config-map-merge
//
// @access private
//
// @param $maps {map...} The map(s) to merge
//
// @return      {map}    The merged map
@function config-map-merge($maps...) {
  $result: nth($maps, 1);

  @for $i from 1 through length($maps) - 1 {
    @each $key, $value in nth($maps, $i + 1) {
      @if type-of($result) != 'map' {
        $result: ($key: $value);
      }

      @if type-of($value) == 'map' {
        $value: config-map-merge(map-get($result, $key), $value);
      }

      @if $key != null {
        $result: map-merge($result, ($key: $value));
      }
    }
  }

  @return $result;
}

// Return the key (first value) from a two-item map
//
// @access private
//
// @param {map...} $tuple - Tuple
//
// @return {* | Null} - Key from `$tuple` or `null`
@function config-tuple-key($tuple) {
  @if length($tuple) < 1 {
    @return null;
  }

  @return nth($tuple, 1);
}

// Return the value (second value) from a two-item map
//
// @access private
//
// @param {map...} $tuple - Tuple
//
// @return {* | Null} - Value from `$tuple` or `null`
@function config-tuple-value($tuple) {
  @if length($tuple) < 2 {
    @return null;
  }

  // @return nth($tuple, 2);
  @return slice($tuple, 2, length($tuple));
}
