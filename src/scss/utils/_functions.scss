// Sass Functions
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Sets a value to/from a configuration path
//
// @function config
//
// @param $key     {string} The configuration key
// @param $value   {*}      The value to set
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-set($key, $value, $default: false) {
  @if $default {
    @if config-map-has($config-default, $path) {
      $value: config-map-get($config-default, $path);
    } @else {
      $config-default: config-map-set($config-default, $path, $value) !global;
    }
  } @else {
    $config-attr: config-map-set($config-attr, $path, $value) !global;
  }

  @return $value;
}

// Gets a value to/from a configuration path
//
// @function config-get
//
// @param $key     {string} The configuration path
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-get($key, $default: false) {
  @if $default {
    @if config-map-has($config-default, $path) {
      @return config-map-get($config-default, $path);
    }
  } @else {
    @if config-map-has($config-attr, $path) {
      @return config-map-get($config-attr, $path);
    } @else if config-map-has($config-default, $path) {
      @return config-map-get($config-default, $path);
    }
  }

  @warn 'The key "#{$key}" doesn\'t exist.';

  @return null;
}

// Sets or gets a value to/from a configuration path
//
// @function config-bind
//
// @param $path    {string} The configuration path
// @param $value   {array} The value to set
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-bind($key, $values, $default: false) {
  @each $value in $values {
    @return config-set($key + $config-delimiter + $value, $value, $default);
  }

  @return config-get($path, $default);
}

// Returns whether a configuration path exists
//
// @function config-has
//
// @param $path {string} The configuration path
//
// @return      {bool}   True if the configuration path has a value,
//                           otherwise false
@function config-has($path) {
  @if config-map-has($config-attr, $path) or config-map-has($config-default, $path) {
    @return true;
  }

  @return false;
}

// Returns whether the key of a map path exists in a Map
//
// @function config-map-has
//
// @private
//
// @param $map  {map}    The Map
// @param $path {string} The map path
//
// @return      {bool}   True if the map path has a value,
//                            otherwise false
@function config-map-has($map, $path) {
  $keys: str-split($path, $config-delimiter);
  $value: $map;

  @each $key in $keys {
    @if type-of($value) != 'map' or not map-has-key($value, $key) {
      @return false;
    }

    $value: map-get($value, $key);
  }

  @return true;
}

// Gets a value from a Map by the map path
//
// @function config-map-get
//
// @private
//
// @param $map  {map}    The Map
// @param $path {string} The map path
//
// @return      {*}      The value of the map path
@function config-map-get($map, $path) {
  $keys: str-split($path, $config-delimiter);
  $value: $map;

  @each $key in $keys {
    @if type-of($value) != 'map' or not map-has-key($value, $key) {
      @warn 'The path "#{$path}" doesn\'t exist.';

      @return null;
    }

    $value: map-get($value, $key);
  }

  @return $value;
}

// Sets a value to a Map by the map path
//
// @function config-map-set
//
// @private
//
// @param $map   {map}    The Map
// @param $path  {string} The map path
// @param $value {*|null} The value to set
//
// @return       {map}    A new Map
@function config-map-set($map, $path, $value) {
  $keys: str-split($path, $config-delimiter);
  $length: length($keys);
  $result: (nth($keys, $length): $value);

  @for $i from 1 through $length - 1 {
    $j: $length - $i;
    $key: nth($keys, $j);

    $path: str-join(list-slice($keys, 1, $j), $config-delimiter);

    @if config-map-has($map, $path) {
      $value: config-map-get($map, $path);

      @if type-of($value) == 'map' {
        $result: config-map-merge(($key: $value), ($key: $result));
      } @else {
        $result: ($key: $result);
      }
    } @else {
      $result: ($key: $result);
    }
  }

  $map: config-map-merge($map, $result);

  @return $map;
}
