// Sass Functions
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Sets a value to/from a configuration path
//
// @function config
//
// @param $key     {string} The configuration key
// @param $value   {*}      The value to set
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-set($key, $value, $default: false) {
  @if $default {
    @if config-map-has($config-default, $key) {
      $value: config-map-get($config-default, $key);
    } @else {
      $config-default: config-map-set($config-default, $key, $value) !global;
    }
  } @else {
    $config-attr: config-map-set($config-attr, $key, $value) !global;
  }

  @return $value;
}

// Gets a value to/from a configuration path
//
// @function config-get
//
// @param $key     {string} The configuration path
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-get($key, $default: false) {
  @if $default {
    @if config-map-has($config-default, $key) {
      @return config-map-get($config-default, $key);
    }
  } @else {
    @if config-map-has($config-attr, $key) {
      @return config-map-get($config-attr, $key);
    } @else if config-map-has($config-default, $key) {
      @return config-map-get($config-default, $key);
    }
  }

  @warn 'The key "#{$key}" doesn\'t exist.';

  @return null;
}

// Sets or gets a value to/from a configuration path
//
// @function config-bind
//
// @param $key     {string} The configuration path
// @param $value   {array} The value to set
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-bind($key, $values, $default: false) {
  @each $value in $values {
    @return config-set($key + $config-delimiter + $value, $value, $default);
  }

  @return config-get($key, $default);
}

// Returns whether a configuration path exists
//
// @function config-has
//
// @param $key {string} The configuration path
//
// @return     {bool}   True if the configuration path has a value,
//                           otherwise false
@function config-has($key) {
  @if config-map-has($config-attr, $key) or config-map-has($config-default, $key) {
    @return true;
  }

  @return false;
}

// Removes keys from maps
//
// @function config-remove
//
// @param $key {string} The configuration path
//
// @return     {bool}   True if the configuration path has a value,
//                           otherwise false
@function config-remove($key) {

}
