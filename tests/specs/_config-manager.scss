@charset "UTF-8";

//      A dot-syntax configuration (Map) library in Sass
//
//                http://growcss.de
//
//         Authors: Daniel Bannert (@anolilab)
//
//      This project is licensed under the terms of the MIT license
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Sass Mixins
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Sets a value to a configuration path
//
// @mixin config-set
//
// @param $key     {string} The configuration key
// @param $value   {*|null} The value to set
// @param $default {bool}   Whether the configuration is default
@mixin config-set($key, $value, $default: false) {
  $config: config-set($key, $value, $default);
}

// Remove settings
//
// @mixin config-reset
//
// @param $settings {string} Configuration path
// @param $default  {bool}   Whether the configuration is default
//
// @return          {bool}   True if the configuration path is removed.
@mixin config-reset($settings, $default:false) {
  $config-reset: config-reset($settings);
}

// Sass Variables
// - - - - - - - - - - - - - - - - - - - - - - - - -

// The delimiter of configuration path
//
// @private
$config-delimiter: "." !default;

// The configuration storage
//
// @private
$config-attr: () !default;

// The default configuration storage
//
// @private
$config-default: () !default;

// Here are all the helpers.
// - - - - - - - - - - - - - - - - - - - - - - - - -
// Return list-map from `$list` and ensure input list-map is list-of-lists
//
// @function list-map-check
//
// @access public
//
// @param $list {list}
//
// @return      {list-map}
@function list-map-check($list) {
  @if length($list) == 2 and length(nth($list, 1)) == 1 {
    @return append((), $list, "comma");
  }

  @return $list;
}

// Extracts a slice of a list
//
// @function list-slice
//
// @access private
//
// @param  $list  {list}   The list to extract
// @param  $start {number} The start index to extract
// @param  $end   {number} The end index to extract
//
// @return        {list}   The extracted list
@function list-slice($list, $start: 1, $end: length($list)) {
  $output: ();

  @if $start >= 1 and $end >= $start {
    @for $i from $start through $end {
      $output: append($output, nth($list, $i));
    }
  }

  @return $output;
}

// Sets a value to a Map by the map path
//
// @function config-map-set
//
// @access private
//
// @param $map   {map}    The Map
// @param $path  {string} The map path
// @param $value {*|null} The value to set
//
// @return       {map...} A new Map
@function config-map-set($map, $path, $value) {
  $map: list-map-check($map);
  $keys: str-split($path, $config-delimiter);
  $length: length($keys);

  $result: (nth($keys, $length): $value);

  @if $length > 1 {
    @for $i from 1 through $length - 1 {
      $path: "";
      $key: nth($keys, 1);

      $j: $length - $i;
      $key: nth($keys, $j);

      $path: str-join(list-slice($keys, 1, $j), $config-delimiter);

      @if config-map-has($map, $path) {
        $value: config-map-get($map, $path);

        @if type-of($value) == "map" {
          $result: config-map-merge(($key: $value), ($key: $result));
        } @else {
          $result: ($key: $result);
        }
      } @else {
        $result: ($key: $result);
      }
    }
  }

  $map: config-map-merge($map, $result);

  @return $map;
}

// Gets a value from a Map by the map path
//
// @function config-map-get
//
// @access private
//
// @param $map  {map...} The Map
// @param $path {string} The map path
//
// @return      {*}      The value of the map path
@function config-map-get($map, $path) {
  $keys: str-split($path, $config-delimiter);
  $value: list-map-check($map);

  @each $key in $keys {
    @if type-of($value) != "map" or not map-has-key($value, $key) {
      @warn "The path '#{$path}' doesn\'t exist.";

      @return null;
    }

    $value: map-get($value, $key);
  }

  @return $value;
}

// Returns whether the key of a map path exists in a Map
//
// @function config-map-has
//
// @access private
//
// @param $map {map...} The Map
// @param $key {string} The map path
//
// @return     {bool}   True if the map path has a value,
//                            otherwise false
@function config-map-has($map, $key) {
  $keys: str-split($key, $config-delimiter);
  $value: list-map-check($map);

  @each $key in $keys {
    @if type-of($value) != "map" or not map-has-key($value, $key) {
      @return false;
    }

    $value: map-get($value, $key);
  }

  @return true;
}

// Recursively merges one or more maps
//
// @function config-map-merge
//
// @access private
//
// @param $maps {map...} The map(s) to merge
//
// @return      {map}    The merged map
@function config-map-merge($maps...) {
  $result: nth($maps, 1);

  @for $i from 1 through length($maps) - 1 {
    @each $key, $value in nth($maps, $i + 1) {
      @if type-of($result) != "map" {
        $result: ($key: $value);
      }

      @if type-of($value) == "map" {
        $value: config-map-merge(map-get($result, $key), $value);
      }

      @if $key != null {
        $result: map-merge($result, ($key: $value));
      }
    }
  }

  @return $result;
}

// Joins list elements with a string
//
// @function str-join
//
// @access private
//
// @param $list {list}   The list to join
// @param $glue {string} The glue string to join list elements
//
// @return      {string} The joined string
@function str-join($list, $glue: "") {
  $result: "";

  @if length($list) == 0 {
    @return $result;
  }

  @if length($list) > 1 {
    @for $i from 1 through length($list) - 1 {
      $result: $result + nth($list, $i) + $glue;
    }
  }

  $result: $result + nth($list, length($list));

  @return $result;
}

// Splits a string by a delimiter
//
// @function str-split
//
// @access private
//
// @param $string    {string} The string to split
// @param $delimiter {string} The boundary string to split the string
//
// @return           {list}   The splitted list
@function str-split($string, $delimiter: "") {
  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $break: false;

  @while not $break {
    $index: str-index($string, $delimiter);

    @if not $index or $index == 0 {
      $break: true;
    } @else {
      $part: if($index != 1, str-slice($string, 1, $index - 1), "");
      $result: append($result, $part);
      $string: str-slice($string, $index + str-length($delimiter));
    }
  }

  @return append($result, $string);
}

// Gets a value to/from a configuration path
//
// @function config-get
//
// @param $key     {string} The configuration path
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-get($key, $default: false) {
  @if $default {
    @if config-map-has($config-default, $key) {
      @return config-map-get($config-default, $key);
    }
  } @else {
    @if config-map-has($config-attr, $key) {
      @return config-map-get($config-attr, $key);
    } @else if config-map-has($config-default, $key) {
      @return config-map-get($config-default, $key);
    }
  }

  @warn "The key '#{$key}' doesn\'t exist.";

  @return null;
}

// Returns whether a configuration path exists
//
// @function config-has
//
// @param $key {string} The configuration path
//
// @return     {bool}   True if the configuration path has a value,
//                           otherwise false
@function config-has($key) {
  @if config-map-has($config-attr, $key) or config-map-has($config-default, $key) {
    @return true;
  }

  @return false;
}

// Remove settings
//
// @function config-reset
//
// @param $settings {string} Configuration path
// @param $default  {bool}   Whether the configuration is default
//
// @return          {bool}   True if the configuration path is removed.
@function config-reset($settings, $default: false) {
  @if length($settings) == 1 {
    $settings: nth($settings, 1);
  }

  @each $setting in $settings {
    @if ($default) {
      $config-default: map-remove($config-default, $setting) !global;
    } @else {
      $config-attr: map-remove($config-attr, $setting) !global;
    }
  }

  @return true;
}

// Sets a value to/from a configuration path
//
// @function config
//
// @param $key     {string} The configuration key
// @param $value   {*}      The value to set
// @param $default {bool}   Whether the configuration is default
//
// @return         {*}      The value of the configuration path
@function config-set($key, $value, $default: false) {
  @if $default {
    @if config-map-has($config-default, $key) {
      $value: config-map-get($config-default, $key);
    } @else {
      $config-default: config-map-set($config-default, $key, $value) !global;
    }
  } @else {
    $config-attr: config-map-set($config-attr, $key, $value) !global;
  }

  @return $value;
}

// Here are all the functions.
// - - - - - - - - - - - - - - - - - - - - - - - - -